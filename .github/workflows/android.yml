# This is a basic workflow to help you get started with Actions

name: Android CI/CD v1

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master, staging, production, next, react-native]

  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    name: Detox Tests
    runs-on: ubutnu-latest
    #disabled until we get it working again
    if: ${{ false && !contains(github.event.head_commit.message, 'skip ci') }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 10.15.3
      - name: Use specific Java version for sdkmanager to work
        uses: joschi/setup-jdk@v1
        with:
          java-version: 'openjdk8'
          architecture: 'x64'
      - name: Install npm dependencies
        uses: bahmutov/npm-install@v1
      - name: Cache Android
        id: cache-android
        uses: actions/cache@v1
        with:
          path: .android
          key: ${{ runner.os }}-android-29
      - name: Download Android Emulator Image
        if: ${{ steps.cache-android.outputs.cache-hit != 'true' }}
        run: |
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install "system-images;android-29;google_apis;x86"
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd --force --name Nexus_5X_API_29_x86 --device "Nexus 5X" -k 'system-images;android-29;google_apis;x86'
      # - name: Android Emulator
      #   timeout-minutes: 10
      #   continue-on-error: true
      #   run: |
      #     echo "Starting emulator"
      #     $ANDROID_HOME/emulator/emulator -list-avds
      #     nohup $ANDROID_HOME/emulator/emulator -avd emu -no-audio -no-snapshot -no-window &
      #     $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
      #     $ANDROID_HOME/platform-tools/adb devices
      #     echo "Emulator started"
      - name: Prepare env
        env: # Or as an environment variable
          SENTRYRC: ${{ secrets.sentryrc_file }}
        run: |
          echo "$SENTRYRC" > android/sentry.properties
          cp .env.dev .env
      - name: run detox build & test
        run: |
          $ANDROID_HOME/emulator/emulator -list-avds
          npm run test:android
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message,'release:') && !contains(github.event.head_commit.message,'skip ci')"
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: set branch name
        env:
          BUILD_NUMBER: ${{ github.run_number }}
        run: |
          echo "Creating release number ${BUILD_NUMBER}"
          echo "ENV=development" >> $GITHUB_ENV
          echo "BRANCH=${{ github.ref }}" >> $GITHUB_ENV
          echo "SECRET_NAME=DEV_ENV" >> $GITHUB_ENV
          echo "APPCENTER_NAME=GoodDollar/GoodDollar-Android-development" >> $GITHUB_ENV
          echo "$GITHUB_HEAD_REF $GITHUB_REF ${{ env.BRANCH }} ${{ env.SECRET_NAME }} ${{ env.APPCENTER_NAME }}"

      - name: Pre-checks - Env is QA
        if: ${{ contains('staging',env.BRANCH) }}
        run: |
          echo "ENV=staging" >> $GITHUB_ENV
          echo "SECRET_NAME=STAGING_ENV" >> $GITHUB_ENV
          echo "APPCENTER_NAME=GoodDollar/GoodDollar-Android-staging" >> $GITHUB_ENV
          echo "${{ env.BRANCH }} ${{ env.SECRET_NAME }} ${{ env.APPCENTER_NAME }}"

      - name: Pre-checks - Env is PROD
        if: ${{ contains('production next',env.BRANCH) }}
        run: |
          echo "ENV=prod" >> $GITHUB_ENV
          echo "SECRET_NAME=PROD_ENV" >> $GITHUB_ENV
          echo "APPCENTER_NAME=GoodDollar/GoodDollar-Android-production" >> $GITHUB_ENV
          echo "${{ env.BRANCH }} ${{ env.SECRET_NAME }} ${{ env.APPCENTER_NAME }}"

      - name: fix max_user_watches
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 10.15.3

      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install npm dependencies
        run: |
          npm ci

      - name: add .env secrets
        env:
          SENTRYRC: ${{ secrets.sentryrc_file }}
        run: |
          env_name="${{ env.ENV }}"
          echo "adding secrets to .env file: ${{ env.SECRET_NAME }}"
          echo "$SENTRYRC" > android/sentry.properties
          echo "${{ secrets[env.SECRET_NAME] }}" >> .env.$env_name

      - name: Setup google services file
        run: echo "${{ secrets.ANDROID_GOOGLE_SERVICES}}" | base64 --decode > ./android/app/google-services.json

      - name: Set release keystore
        run: |
          echo "${{ secrets.RELEASE_ANDROID_KEYSTORE }}" > release.keystore.asc
          gpg -d --passphrase "${{ secrets.RELEASE_ANDROID_PASSPHRASE }}" --batch release.keystore.asc > android/app/release.keystore

      - name: Build Android Release
        env:
          RELEASE_ANDROID_PASSPHRASE: ${{ secrets.RELEASE_ANDROID_PASSPHRASE }}
          ENVFILE: '.env.${{ env.ENV }}'
          BUILD_NUMBER: ${{ github.run_number }}
        run: |
          BUILD_VERSION=`node -pe "require('./package.json')['version']"`          
          echo "Creating release using env: ${ENVFILE} build:${BUILD_NUMBER} version:${BUILD_VERSION} ${GITHUB_RUN_NUMBER} ${{ github.run_number }}"
          cd android && ./gradlew bundleRelease

      - name: Build Universal APK
        uses: skywall/universal-apk-builder@v1.0.1
        with:
          aab_path: './android/app/build/outputs/bundle/release/app-release.aab'
          keystore_path: './android/app/release.keystore'
          keystore_password: ${{secrets.RELEASE_ANDROID_PASSPHRASE}}
          keystore_alias: 'release-alias'
          keystore_alias_password: ${{secrets.RELEASE_ANDROID_PASSPHRASE}}

      - name: Deploy to App Center
        run: |
          token=${{ secrets.APPCENTER_ANDROID_DEV }}

          if [ ${{ env.ENV }} == 'prod' ]
          then
            echo "setting appcenter production"
            token=${{secrets.APPCENTER_ANDROID_PROD}}
          fi
          if [ ${{ env.ENV }} == 'staging' ]
          then
            echo "setting appcenter staging"
            token=${{secrets.APPCENTER_ANDROID_STAGING}}
          fi
          echo "deploying to ${{ env.APPCENTER_NAME }} ${{ env.INPUT_APK_PATH }}"
          npm install appcenter-cli@^2.*
          npx appcenter distribute release --token $token --app "${{ env.APPCENTER_NAME }}" --group "Collaborators" --file "${{ env.UNIVERSAL_APK_PATH }}" --release-notes "$(git log -1 --pretty=format:'%h %s')" --debug
