name: iOS CI/CD v1

on:
  push:
    branches: [ master, staging, next ]
    pull_request:
      branches: [ master ]
      types:
        - closed

  workflow_dispatch:
    inputs:
      release:
        description: 'release type'
        required: true
        default: ''
        type: choice
        options:
          - dev: 'master'
          - qa: 'staging'
          - prod: 'next'

jobs:
  set_target_branch:
    steps:
      name: Detect and set target branch
      run: |
        ${{ github.event.inputs.release != '' && echo "TARGET_BRANCH= ${{ github.event.inputs.release }}" >> $GITHUB_ENV ||
        endsWith(github.ref, '/master') && echo "TARGET_BRANCH= '/master'" >> $GITHUB_ENV ||
        endsWith(github.ref, '/staging') && echo "TARGET_BRANCH= '/staging'" >> $GITHUB_ENV ||
        endsWith(github.ref, '/next') && echo "TARGET_BRANCH= '/next'" >> $GITHUB_ENV }}

codepush:
  name: Hot Code Push
  runs-on: ubuntu-latest
  steps:
    - name: Pre-checks - Env is Dev
      run: |
        echo "ENV=development" >> $GITHUB_ENV
        echo "SECRET_NAME=DEV_ENV" >> $GITHUB_ENV
        echo "APPCENTER_NAME=GoodDollar/GoodDollar-Android-development" >> $GITHUB_ENV
        echo "APPCENTER_TOKEN=${{ secrets.APPCENTER_ANDROID_DEV }}" >> $GITHUB_ENV
        echo "APPCENTER_CODEPUSH_TOKEN=${{ secrets.APPCENTER_CODEPUSH_DEV }}" >> $GITHUB_ENV
    - name: Pre-checks - Env is QA
      if: ${{ endsWith(github.ref, '/staging') }}
      run: |
        echo "ENV=staging" >> $GITHUB_ENV
        echo "SECRET_NAME=STAGING_ENV" >> $GITHUB_ENV
        echo "APPCENTER_NAME=GoodDollar/GoodDollar-Android-staging" >> $GITHUB_ENV
        echo "APPCENTER_TOKEN=${{ secrets.APPCENTER_ANDROID_STAGING }}" >> $GITHUB_ENV
        echo "APPCENTER_CODEPUSH_TOKEN=${{ secrets.APPCENTER_CODEPUSH_STAGING }}" >> $GITHUB_ENV
    - name: Pre-checks - Env is PROD
      if: ${{ endsWith(github.ref, '/next') }}
      run: |
        echo "ENV=prod" >> $GITHUB_ENV
        echo "SECRET_NAME=PROD_ENV" >> $GITHUB_ENV
        echo "APPCENTER_NAME=GoodDollar/GoodDollar-Android-production" >> $GITHUB_ENV
        echo "APPCENTER_TOKEN=${{ secrets.APPCENTER_ANDROID_PROD }}" >> $GITHUB_ENV
        echo "APPCENTER_CODEPUSH_TOKEN=${{ secrets.APPCENTER_CODEPUSH_PROD }}" >> $GITHUB_ENV
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v1
      with:
        node-version: 14
    - name: Cache & install npm dependencies
      uses: bahmutov/npm-install@v1
      with:
        install-command: yarn --frozen-lockfile
    - name: add .env secrets
      env:
        SENTRYRC: ${{ secrets.sentryrc_file }}
      run: |
        env_name="${{ env.ENV }}"
        echo $env_name
        cat .env.$env_name
        echo "adding secrets to .env.$env_name file: ${{ env.SECRET_NAME }}"
        echo "$SENTRYRC" > android/sentry.properties
        echo "${{ secrets[env.SECRET_NAME] }}" >> .env.$env_name
        echo "REACT_APP_CODE_PUSH_KEY=${{ env.APPCENTER_CODEPUSH_TOKEN }}"  >> .env.$env_name
    - name: Code push release
      env:
        BUILD_NUMBER: ${{ github.run_number }}
        CODE_PUSH_DEPLOYMENT_KEY: ${{ env.APPCENTER_CODEPUSH_TOKEN }}
      run: |
        echo Code push release target version $BUILD_NUMBER
        echo Code push CODE_PUSH_DEPLOYMENT_KEY $CODE_PUSH_DEPLOYMENT_KEY
        echo Code push APPCENTER_CODEPUSH_TOKEN ${{ env.APPCENTER_CODEPUSH_TOKEN }}
        yarn lingui:compile
        npx appcenter codepush release-react --token ${{ env.APPCENTER_TOKEN }} -a ${{ env.APPCENTER_NAME }} -d Production  -t $BUILD_NUMBER

  build:
    runs-on: macOS-latest
    # Build runs if triggered by merging pull request to master or by push with 'release <target_branch>' flag and without skipping CI :
    if: |
      github.event_name == 'workflow_dispatch' ||
      (endsWith(github.ref, '/master') && github.event.pull_request.merged) ||
      (endsWith(github.ref, '/staging') && contains(github.event.head_commit.message, 'release qa')) ||
      (endsWith(github.ref, '/next') && contains(github.event.head_commit.message, 'release prod'))
    steps:
      - name: Git branch name
        id: git-branch-name
        uses: EthanSK/git-branch-name-action@v1
      - name: Detect and set target branch
        run: echo "TARGET_BRANCH=${{ inputs.target_branch || env.GIT_BRANCH_NAME }}" >> $GITHUB_ENV
      - name: Pre-checks - Env is Dev
        run: |
          echo "ENV=development" >> $GITHUB_ENV
          echo "SECRET_NAME=DEV_ENV" >> $GITHUB_ENV
          echo "APPCENTER_NAME=GoodDollar/GoodDollar-Android-development" >> $GITHUB_ENV
          echo "APPCENTER_TOKEN=${{ secrets.APPCENTER_ANDROID_DEV }}" >> $GITHUB_ENV
          echo "APPCENTER_CODEPUSH_TOKEN=${{ secrets.APPCENTER_CODEPUSH_DEV }}" >> $GITHUB_ENV
      - name: Pre-checks - Env is QA
        if: ${{ env.TARGET_BRANCH == 'staging' }}
        run: |
          echo "ENV=staging" >> $GITHUB_ENV
          echo "SECRET_NAME=STAGING_ENV" >> $GITHUB_ENV
          echo "APPCENTER_NAME=GoodDollar/GoodDollar-Android-staging" >> $GITHUB_ENV
          echo "APPCENTER_TOKEN=${{ secrets.APPCENTER_ANDROID_STAGING }}" >> $GITHUB_ENV
          echo "APPCENTER_CODEPUSH_TOKEN=${{ secrets.APPCENTER_CODEPUSH_STAGING }}" >> $GITHUB_ENV
      - name: Pre-checks - Env is PROD
        if: ${{ env.TARGET_BRANCH == 'next' }}
        run: |
          echo "ENV=prod" >> $GITHUB_ENV
          echo "SECRET_NAME=PROD_ENV" >> $GITHUB_ENV
          echo "APPCENTER_NAME=GoodDollar/GoodDollar-Android-production" >> $GITHUB_ENV
          echo "APPCENTER_TOKEN=${{ secrets.APPCENTER_ANDROID_PROD }}" >> $GITHUB_ENV
          echo "APPCENTER_CODEPUSH_TOKEN=${{ secrets.APPCENTER_CODEPUSH_PROD }}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.TARGET_BRANCH }}
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: fix max_user_watches
        run: |
          echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      - name: add .env secrets
        env:
          SENTRYRC: ${{ secrets.sentryrc_file }}
        run: |
          env_name="${{ env.ENV }}"
          echo $env_name
          cat .env.$env_name
          echo "adding secrets to .env.$env_name file: ${{ env.SECRET_NAME }}"
          echo "$SENTRYRC" > android/sentry.properties
          echo "${{ secrets[env.SECRET_NAME] }}" >> .env.$env_name
          echo "REACT_APP_CODE_PUSH_KEY=${{ env.APPCENTER_CODEPUSH_TOKEN }}"  >> .env.$env_name
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 10.15.3

      - name: Switch XCode Version
        run: sudo xcode-select -s /Applications/Xcode_11.2.app

      - name: Setup provisioning profile
        run: ./.github/secrets/decrypt_secrets.sh
        env:
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
          IOS_STORE_PROFILE: ${{ secrets.IOS_STORE_PROFILE }}
          IOS_ADHOC_PROFILE: ${{ secrets.IOS_ADHOC_PROFILE }}
          IOS_PROFILE_KEY: ${{ secrets.IOS_PROFILE_KEY }}
          IS_PROD: ${{ contains('production next', env.BRANCH) }}

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-
      - name: Install npm dependencies
        run: |
          npm ci
      - name: Cache Pods dependencies
        uses: actions/cache@v1
        with:
          path: ios/Pods
          key: ${{ runner.OS }}-pods-cache-${{ hashFiles('**/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.OS }}-pods-cache-
      - name: Install pod dependencies
        run: |
          cd ios
          pod install
        shell: bash

      - name: Setup google services file
        run: echo "${{ secrets.IOS_GOOGLE_SERVICES}}" | base64 --decode > ./ios/GoogleService-Info.plist

      - name: Generate assets
        run: node ./animationAssets.js

      - name: set version
        run: |
          BUILD_VERSION=`node -pe "require('./package.json')['version']"`
          echo "setting version ${BUILD_VERSION}.${GITHUB_RUN_NUMBER}"
          plutil -replace CFBundleVersion -string ${BUILD_VERSION}.${GITHUB_RUN_NUMBER} ./ios/GoodDollar/Info.plist
          plutil -replace CFBundleShortVersionString -string ${BUILD_VERSION} ./ios/GoodDollar/Info.plist

      - name: Build app
        env:
          ENVFILE: '../.env.${{ env.ENV }}'
          IS_PROD: ${{ contains('production next', env.BRANCH) }}
        run: |
          yarn lingui:compile
          echo "Creating release using env: ${ENVFILE}, is_prod: ${IS_PROD}"
          PROFILE_UID="b29b41c9-e82a-4aab-96a8-e5d00e55756e"
          if ${{ env.IS_PROD }}; then
            PROFILE_UID="21f28d4b-7641-4420-875f-989a0bcc3d52"
          fi

          cd ios && xcodebuild archive \
            -workspace GoodDollar.xcworkspace \
            -scheme GoodDollar \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $PWD/build/GoodDollar.xcarchive \
            PROVISIONING_PROFILE=$PROFILE_UID \
            CODE_SIGN_IDENTITY="Apple Distribution: GoodDollar Limited (97K3Q6WTLM)"
      - name: Export app
        run: |
          cd ios && xcodebuild \
            -exportArchive \
            -archivePath $PWD/build/GoodDollar.xcarchive \
            -exportOptionsPlist $PWD/ci.plist \
            -exportPath $PWD/build
      - name: Deploy to App Center
        run: |
          token=${{ secrets.APPCENTER_IOS_DEV }}

          if [ ${{ env.ENV }} == 'prod' ]
          then
            echo "setting appcenter production"
            token=${{secrets.APPCENTER_IOS_PROD}}
          fi
          if [ ${{ env.ENV }} == 'staging' ]
          then
            echo "setting appcenter staging"
            token=${{secrets.APPCENTER_IOS_STAGING}}
          fi
          echo "deploying to ${{ env.APPCENTER_NAME }}"
          npm install appcenter-cli@^2.*
          npx appcenter distribute release --token $token --app "${{ env.APPCENTER_NAME }}" --group "Collaborators" --file "ios/build/GoodDollar.ipa" --release-notes "$(git log -1 --pretty=format:'%h %s')" --debug

      - name: Distribute to stores - PROD ONLY
        if: ${{ contains('production next', env.BRANCH) }}
        run: |
          token=${{secrets.APPCENTER_IOS_PROD}}
          npx appcenter distribute stores publish --token $token --app "${{ env.APPCENTER_NAME }}" --store Production --file "ios/build/GoodDollar.ipa" --release-notes "$(git log -1 --pretty=format:'%h %s')"
