diff --git a/dist/cjs/src/hooks/useLocalStorage.js b/dist/cjs/src/hooks/useLocalStorage.js
index 30c768cb1989860f98dba87ba8bac09c4f85d93c..00e1d6bf1ab3e6228b0e70cb55c05c2781a384e9 100644
--- a/dist/cjs/src/hooks/useLocalStorage.js
+++ b/dist/cjs/src/hooks/useLocalStorage.js
@@ -38,7 +38,7 @@ function setItem(key, value, storage) {
  * @internal Intended for internal use - use it on your own risk
  */
 function useLocalStorage(key) {
-    const { localStorageOverride = typeof window !== 'undefined' ? window.localStorage : new LocalStorage_1.default(), } = (0, useConfig_1.useConfig)();
+    const { localStorageOverride = typeof window !== 'undefined' && window.localStorage ? window.localStorage : new LocalStorage_1.default(), } = (0, useConfig_1.useConfig)();
     const [value, setValue] = (0, react_1.useState)(() => getItem(key, localStorageOverride));
     (0, react_1.useEffect)(() => {
         setValue(getItem(key, localStorageOverride));
diff --git a/dist/cjs/src/providers/window/provider.js b/dist/cjs/src/providers/window/provider.js
index ba227909835da1e862ca5c2d241d6e34bf054d83..3c6386b2f2f6c9c57bd80554816123acb7ed607d 100644
--- a/dist/cjs/src/providers/window/provider.js
+++ b/dist/cjs/src/providers/window/provider.js
@@ -9,20 +9,20 @@ const context_1 = require("./context");
  */
 function WindowProvider({ children }) {
     const [isActiveWindow, setActiveWindow] = (0, react_1.useState)(true);
-    (0, react_1.useEffect)(() => {
-        const visibilityChangeListener = () => {
-            switch (document.visibilityState) {
-                case 'hidden':
-                    setActiveWindow(false);
-                    break;
-                case 'visible':
-                    setActiveWindow(true);
-                    break;
-            }
-        };
-        document.addEventListener('visibilitychange', visibilityChangeListener);
-        return () => document.removeEventListener('visibilitychange', visibilityChangeListener);
-    }, []);
+    // (0, react_1.useEffect)(() => {
+    //     const visibilityChangeListener = () => {
+    //         switch (document.visibilityState) {
+    //             case 'hidden':
+    //                 setActiveWindow(false);
+    //                 break;
+    //             case 'visible':
+    //                 setActiveWindow(true);
+    //                 break;
+    //         }
+    //     };
+    //     document.addEventListener('visibilitychange', visibilityChangeListener);
+    //     return () => document.removeEventListener('visibilitychange', visibilityChangeListener);
+    // }, []);
     return (0, jsx_runtime_1.jsx)(context_1.WindowContext.Provider, { value: isActiveWindow, children: children });
 }
 exports.WindowProvider = WindowProvider;
diff --git a/dist/esm/src/hooks/useLocalStorage.js b/dist/esm/src/hooks/useLocalStorage.js
index ac05160b361da576633ea72d7e461ff5ba9b1cdb..f3b4b986ce30c7a19a5fd7465e8be900804f128b 100644
--- a/dist/esm/src/hooks/useLocalStorage.js
+++ b/dist/esm/src/hooks/useLocalStorage.js
@@ -32,7 +32,7 @@ function setItem(key, value, storage) {
  * @internal Intended for internal use - use it on your own risk
  */
 export function useLocalStorage(key) {
-    const { localStorageOverride = typeof window !== 'undefined' ? window.localStorage : new LocalStorage(), } = useConfig();
+    const { localStorageOverride = typeof window !== 'undefined' && window.localStorage ? window.localStorage : new LocalStorage(), } = useConfig();
     const [value, setValue] = useState(() => getItem(key, localStorageOverride));
     useEffect(() => {
         setValue(getItem(key, localStorageOverride));
diff --git a/dist/esm/src/providers/window/provider.js b/dist/esm/src/providers/window/provider.js
index 06ba061f7ae51bb4b822380fe20bdce9a3679003..6737fa90d07ecd51d1ad453987c31013f9a66ca3 100644
--- a/dist/esm/src/providers/window/provider.js
+++ b/dist/esm/src/providers/window/provider.js
@@ -6,20 +6,20 @@ import { WindowContext } from './context';
  */
 export function WindowProvider({ children }) {
     const [isActiveWindow, setActiveWindow] = useState(true);
-    useEffect(() => {
-        const visibilityChangeListener = () => {
-            switch (document.visibilityState) {
-                case 'hidden':
-                    setActiveWindow(false);
-                    break;
-                case 'visible':
-                    setActiveWindow(true);
-                    break;
-            }
-        };
-        document.addEventListener('visibilitychange', visibilityChangeListener);
-        return () => document.removeEventListener('visibilitychange', visibilityChangeListener);
-    }, []);
+    // useEffect(() => {
+    //     const visibilityChangeListener = () => {
+    //         switch (document.visibilityState) {
+    //             case 'hidden':
+    //                 setActiveWindow(false);
+    //                 break;
+    //             case 'visible':
+    //                 setActiveWindow(true);
+    //                 break;
+    //         }
+    //     };
+    //     document.addEventListener('visibilitychange', visibilityChangeListener);
+    //     return () => document.removeEventListener('visibilitychange', visibilityChangeListener);
+    // }, []);
     return _jsx(WindowContext.Provider, { value: isActiveWindow, children: children });
 }
 //# sourceMappingURL=provider.js.map
\ No newline at end of file
diff --git a/src/hooks/useLocalStorage.ts b/src/hooks/useLocalStorage.ts
index 2bdc2274240c77516c78df4263045bf06dbde90d..b33f8b9c338669ada06cb7d36afc44f0d8350f5e 100644
--- a/src/hooks/useLocalStorage.ts
+++ b/src/hooks/useLocalStorage.ts
@@ -33,7 +33,7 @@ function setItem(key: string, value: any, storage: WindowLocalStorage['localStor
  */
 export function useLocalStorage(key: string) {
   const {
-    localStorageOverride = typeof window !== 'undefined' ? window.localStorage : new LocalStorage(),
+    localStorageOverride = typeof window !== 'undefined' && window.localStorage ? window.localStorage : new LocalStorage(),
   } = useConfig()
 
   const [value, setValue] = useState(() => getItem(key, localStorageOverride))
diff --git a/src/providers/window/provider.tsx b/src/providers/window/provider.tsx
index 3095b1f9e51224fffb4b40107a0015fad1a3dc48..9d4e94a516b104499c903eefb77ff35f5ad9f462 100644
--- a/src/providers/window/provider.tsx
+++ b/src/providers/window/provider.tsx
@@ -11,20 +11,20 @@ interface Props {
 export function WindowProvider({ children }: Props) {
   const [isActiveWindow, setActiveWindow] = useState(true)
 
-  useEffect(() => {
-    const visibilityChangeListener = () => {
-      switch (document.visibilityState) {
-        case 'hidden':
-          setActiveWindow(false)
-          break
-        case 'visible':
-          setActiveWindow(true)
-          break
-      }
-    }
-    document.addEventListener('visibilitychange', visibilityChangeListener)
-    return () => document.removeEventListener('visibilitychange', visibilityChangeListener)
-  }, [])
+  // useEffect(() => {
+  //   const visibilityChangeListener = () => {
+  //     switch (document.visibilityState) {
+  //       case 'hidden':
+  //         setActiveWindow(false)
+  //         break
+  //       case 'visible':
+  //         setActiveWindow(true)
+  //         break
+  //     }
+  //   }
+  //   document.addEventListener('visibilitychange', visibilityChangeListener)
+  //   return () => document.removeEventListener('visibilitychange', visibilityChangeListener)
+  // }, [])
 
   return <WindowContext.Provider value={isActiveWindow} children={children} />
 }
