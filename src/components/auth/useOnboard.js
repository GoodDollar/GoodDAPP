import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'
import { init, useConnectWallet, useSetChain } from '@web3-onboard/react'
import Web3 from 'web3'
import injectedModule from '@web3-onboard/injected-wallets'
import walletConnectModule from '@web3-onboard/walletconnect'

import { Platform, View } from 'react-native'
import { get, set } from 'lodash'
import { t } from '@lingui/macro'
import AsyncStorage from '../../lib/utils/asyncStorage'
import { GD_WEB3WALLET } from '../../lib/constants/localStorage'
import { useDialog } from '../../lib/dialog/useDialog'
import Config from '../../config/config'
import SpinnerCheckMark from '../../components/common/animations/SpinnerCheckMark/SpinnerCheckMark'
import logger from '../../lib/logger/js-logger'

const fuse = Config.ethereum[122]

const chains = [
  {
    id: '0x7a',
    token: 'FUSE',
    label: 'Fuse Mainnet',
    rpcUrl: fuse.httpWeb3provider,
    publicRpcUrl: fuse.httpWeb3provider,
    blockExplorerUrl: fuse.explorer,
    icon: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%" viewBox="0 0 74 74"><defs><linearGradient id="a" x1="0.5" x2="0.5" y2="1" gradientUnits="objectBoundingBox"><stop offset="0" stop-color="#b1fdc0"/><stop offset="1" stop-color="#fefd86"/></linearGradient></defs><g transform="translate(-151 -208)"><g transform="translate(57 -154)"><circle cx="37" cy="37" r="37" transform="translate(94 362)" fill="url(#a)"/><path d="M1223.176,815.334a3.936,3.936,0,0,0-2.328-3.629l-4.305-1.963,4.31-1.948a3.981,3.981,0,0,0,.013-7.251l-12.538-5.716a16.977,16.977,0,0,0-14.036-.023l-12.557,5.675a3.981,3.981,0,0,0-.012,7.25l4.3,1.962-4.31,1.948a3.98,3.98,0,0,0-.012,7.25l4.3,1.963L1181.7,822.8a3.981,3.981,0,0,0-.011,7.25l12.538,5.717a16.978,16.978,0,0,0,14.036.023l12.555-5.675a3.981,3.981,0,0,0,.013-7.251l-4.3-1.962,4.311-1.948a3.936,3.936,0,0,0,2.341-3.62m-32.281,7.747,3.345,1.525a16.981,16.981,0,0,0,14.042.024l1.952-.882-4.993-2.275-.168.052a12.944,12.944,0,0,1-9.158-.6l-12.412-5.661,7.409-3.347,3.349,1.528a16.977,16.977,0,0,0,14.035.023l1.951-.883-4.992-2.275-.17.052a12.929,12.929,0,0,1-9.147-.595l-12.416-5.662,12.434-5.62a12.937,12.937,0,0,1,10.693.018l12.415,5.661-12.292,5.557,12.274,5.6-12.288,5.555,12.27,5.606-12.432,5.62a12.939,12.939,0,0,1-10.7-.018l-12.414-5.661Z" transform="translate(-1070.557 -416.498)" fill="#646464"/></g></g></svg>`,
  },
]

//TODO:
// 1. generalize to also work with react-native-dapp provider wallet connect instead of onboard

const useOnboardProvider = () => {
  const [chainInfo, setChain] = useSetChain()
  const [
    {
      wallet, // the wallet that has been connected or null if not yet connected
      connecting, // boolean indicating if connection is in progress
    },
    connect, // function to call to initiate user to connect wallet
    disconnect, // function to call to with wallet<DisconnectOptions> to disconnect wallet
    // updateBalances, // function to be called with an optional array of wallet addresses connected through Onboard to update balance or empty/no params to update all connected wallets
    // setWalletModules, // function to be called with an array of wallet modules to conditionally allow connection of wallet types i.e. setWalletModules([ledger, trezor, injected])
  ] = useConnectWallet()

  const isValidChain = useMemo(
    () => chainInfo?.chains && chainInfo?.chains.find(c => c.id === chainInfo.connectedChain?.id),
    [chainInfo],
  )

  const { connectedChain } = chainInfo || {}
  const { accounts, provider } = wallet || {}
  return {
    connect,
    disconnect,
    connectedChain,
    isValidChain,
    connecting,
    accounts,
    provider,
    setChain,
    walletName: wallet?.label,
  }
}

// initialize the module with options
const walletConnect = walletConnectModule({
  // qrcodeModalOptions: {
  //   mobileLinks: ['rainbow', 'metamask', 'argent', 'trust', 'imtoken', 'pillar'],
  // },
})
const log = logger.child({ from: 'OnboardWallet' })

const injected = injectedModule()

init({
  wallets: [injected, walletConnect],
  chains,
  appMetadata: {
    name: 'GoodDollar',
    icon: `<?xml version="1.0" encoding="UTF-8"?>
    <svg width="100%" height="100%" viewBox="0 0 96 96" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
     <!-- Generated by Pixelmator Pro 2.0.3 -->
     <g id="group">
      <path id="Path" d="M95 48.211 C95 74.052 74.052 95 48.211 95 22.371 95 1.423 74.052 1.423 48.211 1.423 22.371 22.371 1.423 48.211 1.423 74.052 1.423 95 22.371 95 48.211 Z" fill="#00afff" fill-opacity="1" stroke="none"/>
      <g id="group-1">
       <g id="group-2">
        <path id="Path-1" d="M64.837 43.28 L51.952 43.28 44.294 50.949 64.837 50.949 C63.087 58.567 56.405 64.039 48.591 64.25 40.776 64.462 33.807 59.36 31.648 51.846 29.489 44.334 32.686 36.311 39.419 32.34 46.154 28.371 54.721 29.459 60.249 34.986 L63.007 32.228 73.623 21.615 62.794 21.615 59.405 25.005 C51.712 21.093 42.54 21.455 35.181 25.964 27.822 30.473 23.333 38.479 23.325 47.109 23.321 51.026 24.248 54.887 26.031 58.374 L16.154 68.252 26.992 68.252 30.603 64.645 C38.195 72.224 49.799 74.062 59.363 69.201 68.925 64.34 74.279 53.881 72.628 43.28 Z" fill="#ffffff" fill-opacity="1" stroke="none"/>
       </g>
      </g>
     </g>
    </svg>
    `, // svg string icon
    description: 'Free crypto universal basic income',

    // url to a getting started guide for app
    gettingStartedGuide: 'https://gooddollar.org',

    // url that points to more information about app
    explore: 'https://gooddollar.org',
    recommendedInjectedWallets: [
      { name: 'MetaMask', url: 'https://metamask.io' },
      { name: 'Zengo', url: 'https://zengo.com/getzengo/' },
    ],
  },
  accountCenter: {
    desktop: {
      position: 'topRight',
      enabled: true,
      minimal: true,
    },
    mobile: {
      position: 'bottomLeft',
      enabled: true,
      minimal: true,
    },
  },
})

const LoadingAnimation = ({ success, speed = 3 }) => (
  <View style={{ alignItems: 'center' }}>
    <SpinnerCheckMark
      successSpeed={speed}
      success={success}
      width={145}
      marginTop={Platform.select({ web: undefined, default: 5 })}
    />
  </View>
)

export const useOnboard = () => {
  const [web3, setWeb3] = useState(false)
  const curProvider = useRef()
  const [resolveProvider, setResolveProvider] = useState()
  const { showDialog, hideDialog } = useDialog()
  const {
    setChain,
    isValidChain,
    connectedChain,
    connect,
    connecting,
    provider,
    disconnect,
    accounts,
    walletName,
  } = useOnboardProvider()

  const wrapModalProxy = web3 => {
    ;['eth.personal.sign', 'eth.send', 'eth.sendTransaction'].forEach(methodPath => {
      const old = get(web3, methodPath)
      set(web3, methodPath, async (...args) => {
        try {
          showDialog({
            image: <LoadingAnimation />,
            buttons: [],
            title: t`Please sign with your wallet...`,
            showCloseButtons: false,
          })
          const res = await old(...args)
          return res
        } finally {
          hideDialog()
        }
      })
    })
  }
  const onboardConnect = useCallback(async () => {
    const lastWalletLabel = await AsyncStorage.getItem(GD_WEB3WALLET)
    log.debug({ lastWalletLabel })
    connect(lastWalletLabel ? { autoSelect: { label: lastWalletLabel, disableModals: true } } : undefined)
    const providerPromise = new Promise((res, rej) => {
      setResolveProvider({ res, rej })
    })
    return providerPromise
  }, [setResolveProvider, connect, web3])

  useEffect(() => {
    if (!provider && !connecting && resolveProvider) {
      resolveProvider.rej(new Error('user closed wallets modal'))
    }
  }, [connecting, provider, resolveProvider])

  useEffect(() => {
    log.debug('create wallet effect', { provider, isValidChain, curProvider, resolveProvider })

    if (!provider && curProvider.current) {
      curProvider.current = undefined
      return setWeb3(undefined)
    }

    if (provider && !isValidChain) {
      return
    }

    if (provider && web3 && provider === curProvider.current && !connecting) {
      resolveProvider && resolveProvider.res(web3)
    }
    if (provider && provider !== curProvider.current) {
      log.debug('create wallet effect creating new wallet:', { provider, isValidChain, curProvider, resolveProvider })

      const web3 = new Web3(provider)
      wrapModalProxy(web3)
      if (!web3.eth.defaultAccount) {
        web3.eth.defaultAccount = accounts[0].address
      }
      curProvider.current = provider
      AsyncStorage.setItem(GD_WEB3WALLET, walletName)
      resolveProvider && resolveProvider.res(web3)
      setWeb3(web3)
    } else if (!provider && !resolveProvider) {
      setWeb3(undefined) // mark that we initialized
    }
  }, [provider, isValidChain, curProvider, resolveProvider, web3, setWeb3, connecting, walletName])

  useEffect(() => {
    log.debug('chain changed', { provider, connectedChain })
    if (!provider) {
      return
    }

    if (!isValidChain) {
      setChain({ chainId: '0x7a' })
      showDialog({
        buttons: [],
        title: t`Please switch to supported chain`,
        message: t`Supported networks: ${chains.map(_ => _.label).join(', ')}`,
        showCloseButtons: false,
        loading: true,
      })
    }

    return hideDialog
  }, [connectedChain, isValidChain, setChain, provider])
  return { onboardConnect, disconnect, connecting, provider, web3 }
}
